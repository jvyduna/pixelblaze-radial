{
  "name": "! helpers",
  "id": "PbK9R5vWRcjoJhMNn",
  "sources": {
    "main": "/* Also mapped. 12 * 144 of SK9822 wired in setions as:\n        0\n     5     x\n   x         1\n  4           x\n   x         2\n    3      x\n        x\n*/\n\nvar arms = 12\nvar pixPerArm = pixPerRadial = pixelCount / arms\nradials = array(arms)\nfor (i = 0; i < arms; i ++) { radials[i] = array(pixPerArm) } \n\n// Arm remap array -> takes physical segment in index order (wired order)\n// and returns the index of segment where 0 is the straight up arm (12 oo clock)\n// and proceeds clockwise. aRa[chunk] = clockPositionHour\nvar aRa = array(arms);\naRa[0] = 0; aRa[1] = 6; aRa[2] = 2; aRa[3] = 8;\naRa[4] = 4; aRa[5] = 10; aRa[6] = 7; aRa[7] = 1; \naRa[8] = 9; aRa[9] = 3; aRa[10] = 11; aRa[11] = 5; \nfunction indexToRadial(index) {\n  segment = floor(index / pixPerArm)\n  return aRa[segment]\n}\n\n// 0, 1/12, 2/12, ..etc.. 11/12 \nfunction indexToUnitRadial(index) {\n  return indexToRadial(index) / arms\n}\n\n// Takes an index, returns # pixels from center\nfunction indexFromCenter(index) {\n  arm = floor(index / pixPerArm)\n  inbound = (arm % 2) == 0\n  pixIntoArm = index % pixPerArm\n  pixFromCenter = inbound ? (pixPerArm - pixIntoArm - 1) : pixIntoArm\n  return pixFromCenter\n}\n\nvar radialIndex = array(pixelCount)\nfor (i = 0; i < pixelCount; i++) { radialIndex[i] = indexFromCenter(i) }\n\n\n// Takes an index, returns a fraction of an arm's length from center\nfunction indexToUnit(index) {\n  return radialIndex[index] / pixPerArm\n}\n\nvar radialPct = array(pixelCount)\nfor (i = 0; i < pixelCount; i++) { radialPct[i] = indexToUnit(i) }\n\n\nexport var w, w1, w2\nexport function beforeRender(delta) {\n  t1 = time(4 / 65.536)\n}\n\nexport function render(rawIndex) {\n  index = radialIndex[rawIndex]\n  pixelCount = pixPerArm\n  pct = radialPct[rawIndex]\n  \n  v = 1 - abs(5*pct - 5*wave(t1))\n  v *= v * v\n  hsv(0, 1, v)\n}\n\n// export function render2D(index, x, y) {\n//   h = 0.2\n//   s = 1\n//   v = t1\n//   v *= v\n//   hsv(h, s, v)\n// }\n\n"
  },
  "preview": "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"
}