{
  "name": "lightning ZAP!",
  "id": "mrYJjZGvR8CKDBH87",
  "sources": {
    "main": "/* Also mapped. 12 * 144 of SK9822 wired in setions as:\n        0\n     5     x\n   x         1\n  4           x\n   x         2\n    3      x\n        x\n*/\n\nvar arms = 12\nvar pixPerArm = pixPerRadial = pixelCount / arms\nradials = array(arms)\nfor (i = 0; i < arms; i ++) { radials[i] = array(pixPerArm) } \n\n// Arm remap array -> takes physical segment in index order (wired order)\n// and returns the index of segment where 0 is the straight up arm (12 oo clock)\n// and proceeds clockwise. aRa[chunk] = clockPositionHour\nvar aRa = array(arms);\naRa[0] = 0; aRa[1] = 6; aRa[2] = 2; aRa[3] = 8;\naRa[4] = 4; aRa[5] = 10; aRa[6] = 7; aRa[7] = 1; \naRa[8] = 9; aRa[9] = 3; aRa[10] = 11; aRa[11] = 5; \nfunction indexToRadial(index) {\n  segment = floor(index / pixPerArm)\n  return aRa[segment]\n}\n\n// 0, 1/12, 2/12, ..etc.. 11/12 \nfunction indexToUnitRadial(index) {\n  return indexToRadial(index) / arms\n}\n\n// Takes an index, returns # pixels from center\nfunction indexFromCenter(index) {\n  arm = floor(index / pixPerArm)\n  inbound = (arm % 2) == 0\n  pixIntoArm = index % pixPerArm\n  pixFromCenter = inbound ? (pixPerArm - pixIntoArm - 1) : pixIntoArm\n  return pixFromCenter\n}\n\nvar radialIndex = array(pixelCount)\nfor (i = 0; i < pixelCount; i++) { radialIndex[i] = indexFromCenter(i) }\n\n\n// Takes an index, returns a fraction of an arm's length from center\nfunction indexToUnit(index) {\n  return radialIndex[index] / pixPerArm\n}\n\nvar radialPct = array(pixelCount)\nfor (i = 0; i < pixelCount; i++) { radialPct[i] = indexToUnit(i) }\n\n\n\n\n\nboltMin = floor(pixPerArm/15)\nboltMax = ceil(pixPerArm/6)\ndelayFactor = 15\nresetDelayFactor = 1000\nfade = 15\n\npixels = array(pixelCount)\nx = 0\ntimer = 0\nexport function beforeRender(delta) {\n  for (i = 0; i < pixelCount; i++)\n    pixels[i] -= (pixels[i] * fade * (delta/1000)) + (1>>16)\n\n  timer -= delta\n  \n  if (timer <= 0) {\n    boltSize = boltMin + random(boltMax - boltMin)\n    while (boltSize-- > 0 && x < pixPerArm) {\n      pixels[x++] = 1\n    }\n\n    timer = random(delayFactor) + delayFactor/5\n    timer *= timer\n    \n    \n    if (x >= pixPerArm) {\n      x = 0\n      timer = random(resetDelayFactor) + resetDelayFactor/3\n    }\n  }\n  \n}\n\nexport function render(rawIndex) {\n  radial = indexToRadial(rawIndex)\n  index = radialIndex[rawIndex]\n  on = (arms - radial) == floor(time(0.01)*arms)\n  v = pixels[index]\n  hsv(2/3, 0, v*on)\n}"
  },
  "preview": "/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoMDAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsNFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAARCACWAGQDASIAAhEBAxEB/8QAGAABAQEBAQAAAAAAAAAAAAAAAAMEBQn/xAAmEAEAAgECAwkBAAAAAAAAAAAAAQIDBBEFVJEUFiEiMVKBldLT/8QAFAEBAAAAAAAAAAAAAAAAAAAAAP/EABQRAQAAAAAAAAAAAAAAAAAAAAD/2gAMAwEAAhEDEQA/APKoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABWmalKxE4Md591ptvPSUgF+0Y+Vxdb/AKEAAAAAAAAAAAAAAAAAAAAAAAAAFcOlvnrNq2xxETt58taz0mYadLwbUazPXDjyaSt7b7Tl1mHHX038bWtER8ywgO73L4hzHCfudH/UcIAAAAAAAAAAAAAAB//Z"
}