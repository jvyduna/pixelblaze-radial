{
  "name": "matrix 2D honeycomb",
  "id": "pbz5zNpYrYBkzwRj2",
  "sources": {
    "main": "/*\n  This pattern is meant to be displayed on an LED matrix or other 2D surface \n  defined in the Mapper tab.\n  \n  Output demo: https://youtu.be/u9z8_XGe684\n  \n  This pattern builds on the example \"Matrix 2D Pulse\". To best understand\n  this one, start there.\n*/\n\nexport function beforeRender(delta) {\n  tf = 5 // Overall animation duration constant. A smaller duration runs faster.\n  \n  f  = wave(time(tf * 6.6 / 65.536)) * 15 + 2 // 2 to 7; Frequency (cell density)\n  t1 = wave(time(tf * 9.8 / 65.536)) * PI2  // 0 to 2*PI; Oscillates x shift\n  t2 = wave(time(tf * 12.5 / 65.536)) * PI2 // 0 to 2*PI; Oscillates y shift\n  t3 = wave(time(tf * 9.8 / 65.536)) // Shift h: wavelength of tf * 9.8 s\n  t4 = time(tf * 0.66 / 65.536) // Shift v: 0 to 1 every 0.66 sec\n}\n\nexport function render2D(index, x, y) {\n  z = (1 + sin(x * f + t1) + cos(y * f + t2)) * .5 \n\n  /*\n    As explained in \"Matrix 2D Pulse\", z is now an egg-carton shaped surface\n    in x and y. The number of hills/valles visible (the frequency) is\n    proportional to f; f oscillates. The position of the centers in x and y \n    oscillate with t1 and t2. z's value ranges from -0.5 to 1.5.\n    \n    First, we'll derive the brighness (v) from this field.\n    \n    t4 is a 0 to 1 sawtooth, so (z + t4) now is between -0.5 and 2.5\n    wave(z + t4) therfore cycles 0 to 1 three times, ever shifting (by t4)\n    with respect to the original egg carton.\n  */\n  v = wave(z + t4)\n  \n  // Typical concave-upward brightness scaling for perceptual aesthetics.\n  // v enters and exits as 0-1. 0 -> 0, 1 -> 1, but 0.5 -> 0.125 \n  v = v * v * v\n  \n  /*\n    Triangle will essentially double the frequency; t3 will add an \n    oscillating offset. With h in 0-1.5, hsv() \"wraps\" h, and since all\n    these functions are continuous, it's just spending extra time on the\n    hue wheel in the 0-0.5 range. Tweak this until you like how the final \n    colors progress over time, but anything based on z will make colors\n    related to the circles seen from above in the egg carton pattern.\n  */\n  h = triangle(z) / 2 + t3\n  \n  hsv(h, 1, v)\n}\n"
  },
  "preview": "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"
}