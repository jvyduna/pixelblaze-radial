{
  "name": "radial KITT",
  "id": "bmk988RMESK4hTh3x",
  "sources": {
    "main": "/* Also mapped. 12 * 144 of SK9822 wired in setions as:\n        0\n     5     x\n   x         1\n  4           x\n   x         2\n    3      x\n        x\n*/\n\nvar arms = 12\nvar pixPerArm = pixPerRadial = pixelCount / arms\nradials = array(arms)\nfor (i = 0; i < arms; i ++) { radials[i] = array(pixPerArm) } \n\n// Arm remap array -> takes physical segment in index order (wired order)\n// and returns the index of segment where 0 is the straight up arm (12 oo clock)\n// and proceeds clockwise. aRa[chunk] = clockPositionHour\nvar aRa = array(arms);\naRa[0] = 0; aRa[1] = 6; aRa[2] = 2; aRa[3] = 8;\naRa[4] = 4; aRa[5] = 10; aRa[6] = 7; aRa[7] = 1; \naRa[8] = 9; aRa[9] = 3; aRa[10] = 11; aRa[11] = 5; \nfunction indexToRadial(index) {\n  segment = floor(index / pixPerArm)\n  return aRa[segment]\n}\n\n// 0, 1/12, 2/12, ..etc.. 11/12 \nfunction indexToUnitRadial(index) {\n  return indexToRadial(index) / arms\n}\n\n// Takes an index, returns # pixels from center\nfunction indexFromCenter(index) {\n  arm = floor(index / pixPerArm)\n  inbound = (arm % 2) == 0\n  pixIntoArm = index % pixPerArm\n  pixFromCenter = inbound ? (pixPerArm - pixIntoArm - 1) : pixIntoArm\n  return pixFromCenter\n}\n\nradialIndex = array(pixelCount)\nfor (i = 0; i < pixelCount; i++) { radialIndex[i] = indexFromCenter(i) }\n\n\n// Takes an index, returns a fraction of an arm's length from center\nfunction indexToUnit(index) {\n  return indexFromCenter / pixPerArm\n}\n\nradialPct = array(pixelCount)\nfor (i = 0; i < pixelCount; i++) { radialPct[i] = indexToUnit(i) }\n\n\n\n\n\nleader = 0\ndirection = 1\npixels = array(pixPerArm)\n\nspeed = pixPerArm / 800\nfade = .0009\nexport function beforeRender(delta) {\n  lastLeader = floor(leader)\n  leader += direction * delta * speed\n  \n  if (leader >= pixPerArm) {\n    direction = -direction\n    leader = pixPerArm - 1\n  }\n  \n  if (leader < 0) {\n    direction = -direction\n    leader = 0\n  }\n\n  // Fill pixels between frames. Added after the video walkthrough was uploaded.\n  up = lastLeader < leader \n  for (i = lastLeader; i != floor(leader); up ? i++ : i-- ) pixels[i] = 1\n    \n  for (i = 0; i < pixPerArm; i++) {\n    pixels[i] -= delta * fade\n    pixels[i] = max(0, pixels[i])\n  }\n}\n\nexport function render(index) {\n  index = radialIndex[index]\n\n  v = pixels[index]\n  v = v * v * v\n  hsv(0, 1, v)\n}"
  },
  "preview": "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"
}