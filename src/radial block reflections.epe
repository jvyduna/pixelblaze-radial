{
  "name": "radial block reflections",
  "id": "QqZqNsLmk2CAvheRR",
  "sources": {
    "main": "/* Also mapped. 12 * 144 of SK9822 wired in setions as:\n        0\n     5     x\n   x         1\n  4           x\n   x         2\n    3      x\n        x\n*/\n\nvar arms = 12\nvar pixPerArm = pixPerRadial = pixelCount / arms\nradials = array(arms)\nfor (i = 0; i < arms; i ++) { radials[i] = array(pixPerArm) } \n\n// Arm remap array -> takes physical segment in index order (wired order)\n// and returns the index of segment where 0 is the straight up arm (12 oo clock)\n// and proceeds clockwise. aRa[chunk] = clockPositionHour\nvar aRa = array(arms);\naRa[0] = 0; aRa[1] = 6; aRa[2] = 2; aRa[3] = 8;\naRa[4] = 4; aRa[5] = 10; aRa[6] = 7; aRa[7] = 1; \naRa[8] = 9; aRa[9] = 3; aRa[10] = 11; aRa[11] = 5; \nfunction indexToRadial(index) {\n  segment = floor(index / pixPerArm)\n  return aRa[segment]\n}\n\n// 0, 1/12, 2/12, ..etc.. 11/12 \nfunction indexToUnitRadial(index) {\n  return indexToRadial(index) / arms\n}\n\n// Takes an index, returns # pixels from center\nfunction indexFromCenter(index) {\n  arm = floor(index / pixPerArm)\n  inbound = (arm % 2) == 0\n  pixIntoArm = index % pixPerArm\n  pixFromCenter = inbound ? (pixPerArm - pixIntoArm - 1) : pixIntoArm\n  return pixFromCenter\n}\n\n// Takes an index, returns a fraction of an arm's length from center\nfunction indexToUnit(index) {\n  return indexFromCenter / pixPerArm\n}\n\nexport function beforeRender(delta) {\n  t2 = time(0.1) * PI2\n  t1 = time(.1)\n  t3 = time(.5)\n  t4 = time(0.2) * PI2\n}\n\nexport function render(index) {\n  h = sin(t2)\n  m = (.3 + triangle(t1) * .2)\n  h = h + (((indexFromCenter(index) - pixPerArm / 2) / pixPerArm * ( triangle(t3) * 10 + 4 * sin(t4)) % m))\n  s = 1;\n  v = ((abs(h) + abs(m) + t1) % 1);\n  v = v * v\n  hsv(h, s, v)\n}"
  },
  "preview": "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"
}