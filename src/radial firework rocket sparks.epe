{
  "name": "radial firework rocket sparks",
  "id": "FFH5Ge5b4pbP9Z8th",
  "sources": {
    "main": "/* Also mapped. 12 * 144 of SK9822 wired in setions as:\n        0\n     5     x\n   x         1\n  4           x\n   x         2\n    3      x\n        x\n*/\n\nvar arms = 12\nvar pixPerArm = pixPerRadial = pixelCount / arms\nradials = array(arms)\nfor (i = 0; i < arms; i ++) { radials[i] = array(pixPerArm) } \n\n// Arm remap array -> takes physical segment in index order (wired order)\n// and returns the index of segment where 0 is the straight up arm (12 oo clock)\n// and proceeds clockwise. aRa[chunk] = clockPositionHour\nvar aRa = array(arms);\naRa[0] = 0; aRa[1] = 6; aRa[2] = 2; aRa[3] = 8;\naRa[4] = 4; aRa[5] = 10; aRa[6] = 7; aRa[7] = 1; \naRa[8] = 9; aRa[9] = 3; aRa[10] = 11; aRa[11] = 5; \nfunction indexToRadial(index) {\n  segment = floor(index / pixPerArm)\n  return aRa[segment]\n}\n\n// 0, 1/12, 2/12, ..etc.. 11/12 \nfunction indexToUnitRadial(index) {\n  return indexToRadial(index) / arms\n}\n\n// Takes an index, returns # pixels from center\nfunction indexFromCenter(index) {\n  arm = floor(index / pixPerArm)\n  inbound = (arm % 2) == 0\n  pixIntoArm = index % pixPerArm\n  pixFromCenter = inbound ? (pixPerArm - pixIntoArm - 1) : pixIntoArm\n  return pixFromCenter\n}\n\nradialIndex = array(pixelCount)\nfor (i = 0; i < pixelCount; i++) { radialIndex[i] = indexFromCenter(i) }\n\n\n// Takes an index, returns a fraction of an arm's length from center\nfunction indexToUnit(index) {\n  return indexFromCenter / pixPerArm\n}\n\nradialPct = array(pixelCount)\nfor (i = 0; i < pixelCount; i++) { radialPct[i] = indexToUnit(i) }\n\n\n\nexport function beforeRender(delta) {\n  // time() outputs a sawtooth from 0..1. An argument of 0.05 means it takes \n  // 0.04 * 65.536 seconds to progress to 1 before looping back to 0.\n  t1 = time(0.04)\n}\n\nexport function render(index) {\n  index = radialIndex[index]\n  pixelCount = pixPerArm\n\n  canSpark = square(index / pixelCount + t1, 0.35)\n  \n  /*\n    To be a white spark, two things need to be true: This pixel in the canSpark \n    section, and a randomly selected number between 0 and 1 needs to be greater \n    than 0.95 (a 1-in-20 chance)\n  */\n  isSpark = canSpark && random(1) > 0.95\n  \n  // To make a fiery rocket, set up a second square wave that will be 5% of the \n  // strip length, and lead the sparks secion by 5% of the strip length.\n  isFire = square(index / pixelCount + t1 + 0.15, 0.15)\n  \n  /*\n    Now we'll set our hues for the fiery section. We want something between \n    hue 0 (red) and hue 0.2 (yellow).\n\n    You might think, how about making it yellow up front, and the redish portion\n    trails behind, all of it moving along with the rocket. We could do that, but\n    the alternate approach used here sort of simulates fire being expelled from\n    a rocket instead. The red-to-yellow sawtooth gradient is only a function of\n    the pixel's position in the strip. That way, as the rocket moves through \n    space, it leaves a trail behind it instead of keeping the plume with it.\n    \n    The \"%\" is the remainder operation, so we'll get a repeating sequence\n    between 0 and 0.2\n  \n    As you'll see in a second, this hue will be ignored for sparks because \n    sparks will have their saturation set to zero. A zero saturation makes the \n    pixel white no matter what the hue is.\n  */\n  h = (index / (pixelCount / 5)) % .2\n\n  /*\n    Let's put it all together with hsv(hue, saturation, value). \n    \n    The final color of a pixel will be either:\n      - black (because value is zero)\n      - white (because value is high and saturation is zero), or \n      - red-yellow (because value is high and saturation is high)\n      \n    h will always be a hue between red and yellow, even when hue is ignored\n    because the pixel is a spark or off insead.\n    \n    We set the saturation to be the 0-or-1 value of isFire. isFire will be 1 for\n    the fire pixels and 0 for the spark or off pixels. That means we'll have \n    saturated red-yellow colors when isFire is 1, and we'll have desaturated \n    (white) colors for a spark.\n    \n    Finally, for the brightness value, we want this pixel to be bright (1) if \n    it's either a fire pixel or a spark pixel, and fully off (0) otherwise.\n  */\n  hsv(h, isFire, isFire || isSpark)\n}\n"
  },
  "preview": ""
}