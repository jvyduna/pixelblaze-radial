{
  "name": "radial glitch bands",
  "id": "LR4KPE7qNStxaFMaA",
  "sources": {
    "main": "/* Also mapped. 12 * 144 of SK9822 wired in setions as:\n        0\n     5     x\n   x         1\n  4           x\n   x         2\n    3      x\n        x\n*/\n\nvar arms = 12\nvar pixPerArm = pixPerRadial = pixelCount / arms\nradials = array(arms)\nfor (i = 0; i < arms; i ++) { radials[i] = array(pixPerArm) } \n\n// Arm remap array -> takes physical segment in index order (wired order)\n// and returns the index of segment where 0 is the straight up arm (12 oo clock)\n// and proceeds clockwise. aRa[chunk] = clockPositionHour\nvar aRa = array(arms);\naRa[0] = 0; aRa[1] = 6; aRa[2] = 2; aRa[3] = 8;\naRa[4] = 4; aRa[5] = 10; aRa[6] = 7; aRa[7] = 1; \naRa[8] = 9; aRa[9] = 3; aRa[10] = 11; aRa[11] = 5; \nfunction indexToRadial(index) {\n  segment = floor(index / pixPerArm)\n  return aRa[segment]\n}\n\n// 0, 1/12, 2/12, ..etc.. 11/12 \nfunction indexToUnitRadial(index) {\n  return indexToRadial(index) / arms\n}\n\n// Takes an index, returns # pixels from center\nfunction indexFromCenter(index) {\n  arm = floor(index / pixPerArm)\n  inbound = (arm % 2) == 0\n  pixIntoArm = index % pixPerArm\n  pixFromCenter = inbound ? (pixPerArm - pixIntoArm - 1) : pixIntoArm\n  return pixFromCenter\n}\n\nradialIndex = array(pixelCount)\nfor (i = 0; i < pixelCount; i++) { radialIndex[i] = indexFromCenter(i) }\n\n\n// Takes an index, returns a fraction of an arm's length from center\nfunction indexToUnit(index) {\n  return indexFromCenter / pixPerArm\n}\n\nradialPct = array(pixelCount)\nfor (i = 0; i < pixelCount; i++) { radialPct[i] = indexToUnit(i) }\n\n\n\nexport function beforeRender(delta) {\n  t1 = time(0.1)*PI2;\n  t2 = time(.1);\n  t3 = time(.5);\n  t4 = time(0.2)*PI2;\n  t5 = time(.05);\n  t6 = time(.02);\n}\n\nexport function render(index) {\n  index = radialIndex[index]\n  pixelCount = pixPerArm\n  h = sin(t1)\n  m = (.3 + triangle(t2) * .2)\n  h = h + (((index - pixelCount / 2) / pixelCount * ( triangle(t3) * 10 + 4 * sin(t4)) % m))\n  s1 = triangle((t5 + index / pixelCount * 5) % 1);\n  s1 = s1 * s1\n  s2 = triangle((t6 - (index - pixelCount) / pixelCount) % 1);\n  s2 = s2 * s2 * s2 * s2\n  s = 1 - triangle(s1 * s2)\n  v = (s1 > s2) + .5\n  hsv(h, s, v)\n}"
  },
  "preview": ""
}