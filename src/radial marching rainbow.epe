{
  "name": "radial marching rainbow",
  "id": "7Ju7GPHN7A6STrrxL",
  "sources": {
    "main": "/* Also mapped. 12 * 144 of SK9822 wired in setions as:\n        0\n     5     x\n   x         1\n  4           x\n   x         2\n    3      x\n        x\n*/\n\nvar arms = 12\nvar pixPerArm = pixPerRadial = pixelCount / arms\nradials = array(arms)\nfor (i = 0; i < arms; i ++) { radials[i] = array(pixPerArm) } \n\n// Arm remap array -> takes physical segment in index order (wired order)\n// and returns the index of segment where 0 is the straight up arm (12 oo clock)\n// and proceeds clockwise. aRa[chunk] = clockPositionHour\nvar aRa = array(arms);\naRa[0] = 0; aRa[1] = 6; aRa[2] = 2; aRa[3] = 8;\naRa[4] = 4; aRa[5] = 10; aRa[6] = 7; aRa[7] = 1; \naRa[8] = 9; aRa[9] = 3; aRa[10] = 11; aRa[11] = 5; \nfunction indexToRadial(index) {\n  segment = floor(index / pixPerArm)\n  return aRa[segment]\n}\n\n// 0, 1/12, 2/12, ..etc.. 11/12 \nfunction indexToUnitRadial(index) {\n  return indexToRadial(index) / arms\n}\n\n// Takes an index, returns # pixels from center\nfunction indexFromCenter(index) {\n  arm = floor(index / pixPerArm)\n  inbound = (arm % 2) == 0\n  pixIntoArm = index % pixPerArm\n  pixFromCenter = inbound ? (pixPerArm - pixIntoArm - 1) : pixIntoArm\n  return pixFromCenter\n}\n\nvar radialIndex = array(pixelCount)\nfor (i = 0; i < pixelCount; i++) { radialIndex[i] = indexFromCenter(i) }\n\n\n// Takes an index, returns a fraction of an arm's length from center\nfunction indexToUnit(index) {\n  return radialIndex[index] / pixPerArm\n}\n\nvar radialPct = array(pixelCount)\nfor (i = 0; i < pixelCount; i++) { radialPct[i] = indexToUnit(i) }\n\n\nexport function beforeRender(delta) {\n  t1 = time(.1)\n  t2 = time(.05)\n}\n\nexport function render(index) {\n  pct = radialPct[index]\n\n  w1 = wave(t1 + pct)\n  w2 = wave(t2-pct*10+.2)\n  v = w1 - w2\n  h = wave(wave(wave(t1 + pct)) - pct)\n  hsv(h,1,v*(0.01+pct))\n}"
  },
  "preview": "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"
}