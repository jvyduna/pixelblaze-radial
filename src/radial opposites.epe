{
  "name": "radial opposites",
  "id": "iYDPEfGzNLkCiHdnG",
  "sources": {
    "main": "/* Also mapped. 12 * 144 of SK9822 wired in setions as:\n        0\n     5     x\n   x         1\n  4           x\n   x         2\n    3      x\n        x\n*/\n\nvar arms = 12\nvar pixPerArm = pixPerRadial = pixelCount / arms\nradials = array(arms)\nfor (i = 0; i < arms; i ++) { radials[i] = array(pixPerArm) } \n\n// Arm remap array -> takes physical segment in index order (wired order)\n// and returns the index of segment where 0 is the straight up arm (12 oo clock)\n// and proceeds clockwise. aRa[chunk] = clockPositionHour\nvar aRa = array(arms);\naRa[0] = 0; aRa[1] = 6; aRa[2] = 2; aRa[3] = 8;\naRa[4] = 4; aRa[5] = 10; aRa[6] = 7; aRa[7] = 1; \naRa[8] = 9; aRa[9] = 3; aRa[10] = 11; aRa[11] = 5; \nfunction indexToRadial(index) {\n  segment = floor(index / pixPerArm)\n  return aRa[segment]\n}\n\n// 0, 1/12, 2/12, ..etc.. 11/12 \nfunction indexToUnitRadial(index) {\n  return indexToRadial(index) / arms\n}\n\n// Takes an index, returns # pixels from center\nfunction indexFromCenter(index) {\n  arm = floor(index / pixPerArm)\n  inbound = (arm % 2) == 0\n  pixIntoArm = index % pixPerArm\n  pixFromCenter = inbound ? (pixPerArm - pixIntoArm - 1) : pixIntoArm\n  return pixFromCenter\n}\n\nvar radialIndex = array(pixelCount)\nfor (i = 0; i < pixelCount; i++) { radialIndex[i] = indexFromCenter(i) }\n\n\n// Takes an index, returns a fraction of an arm's length from center\nfunction indexToUnit(index) {\n  return radialIndex[index] / pixPerArm\n}\n\nvar radialPct = array(pixelCount)\nfor (i = 0; i < pixelCount; i++) { radialPct[i] = indexToUnit(i) }\n\nexport function beforeRender(delta) {\n  t1 = time(.1)\n  t2 = time(.2)\n}\n\nexport function render(index) {\n  il = radialPct[index]\n  w1 = wave(t1 + il)\n  w2 = wave(t2 - il)\n  w3 = wave((il + w1 + w2 ))\n  h = w3 %.3\n  h = (h > .15 ? h : h +.5) + t1\n  s = 1\n  v = ((w1+.1) * (w2+.1) * (w3+.1))\n  v = v*v\n  hsv(h,s,v)\n}"
  },
  "preview": "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"
}