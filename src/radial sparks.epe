{
  "name": "radial sparks",
  "id": "8gjB89jqQojktXgc4",
  "sources": {
    "main": "/* Also mapped. 12 * 144 of SK9822 wired in setions as:\n        0\n     5     x\n   x         1\n  4           x\n   x         2\n    3      x\n        x\n*/\n\nvar arms = 12\nvar pixPerArm = pixPerRadial = pixelCount / arms\nradials = array(arms)\nfor (i = 0; i < arms; i ++) { radials[i] = array(pixPerArm) } \n\n// Arm remap array -> takes physical segment in index order (wired order)\n// and returns the index of segment where 0 is the straight up arm (12 oo clock)\n// and proceeds clockwise. aRa[chunk] = clockPositionHour\nvar aRa = array(arms);\naRa[0] = 0; aRa[1] = 6; aRa[2] = 2; aRa[3] = 8;\naRa[4] = 4; aRa[5] = 10; aRa[6] = 7; aRa[7] = 1; \naRa[8] = 9; aRa[9] = 3; aRa[10] = 11; aRa[11] = 5; \nfunction indexToRadial(index) {\n  segment = floor(index / pixPerArm)\n  return aRa[segment]\n}\n\n// 0, 1/12, 2/12, ..etc.. 11/12 \nfunction indexToUnitRadial(index) {\n  return indexToRadial(index) / arms\n}\n\n// Takes an index, returns # pixels from center\nfunction indexFromCenter(index) {\n  arm = floor(index / pixPerArm)\n  inbound = (arm % 2) == 0\n  pixIntoArm = index % pixPerArm\n  pixFromCenter = inbound ? (pixPerArm - pixIntoArm - 1) : pixIntoArm\n  return pixFromCenter\n}\n\nvar radialIndex = array(pixelCount)\nfor (i = 0; i < pixelCount; i++) { radialIndex[i] = indexFromCenter(i) }\n\n\n// Takes an index, returns a fraction of an arm's length from center\nfunction indexToUnit(index) {\n  return radialIndex[index] / pixPerArm\n}\n\nvar radialPct = array(pixelCount)\nfor (i = 0; i < pixelCount; i++) { radialPct[i] = indexToUnit(i) }\n\n\nnumSparks = 5;\nfriction = 0.3 / pixPerArm ;\nsparks = array(numSparks);\nsparkX = array(numSparks);\npixels = array(pixPerArm);\n\nexport function beforeRender(delta) {\n  delta *= .1;\n  for (i = 0; i < pixPerArm; i++)\n    pixels[i] = pixels[i] *.2\n  for (i = 0; i < numSparks; i++) {\n    if (sparks[i] <= 0) {\n      sparks[i] = 1 + random(.4);\n      sparkX[i] = random(5);\n    }\n    sparks[i] -= friction * delta;\n    sparkX[i] += sparks[i] * sparks[i] * 0.3*delta;\n    if (sparkX[i] > pixPerArm) {\n      sparkX[i] = 0;\n      sparks[i] = 0;\n    }\n    pixels[sparkX[i]] += sparks[i];\n  }\n}\n\nexport function render(index) {\n  index = radialIndex[index]\n\n  v = pixels[index];\n  hsv(.02, 1.1 - v*v, v * v)\n}\n"
  },
  "preview": "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"
}