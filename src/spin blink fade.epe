{
  "name": "spin blink fade",
  "id": "r2BaooecArTduoTep",
  "sources": {
    "main": "/* Also mapped. 12 * 144 of SK9822 wired in setions as:\n        0\n     5     x\n   x         1\n  4           x\n   x         2\n    3      x\n        x\n*/\n\nvar arms = 12\nvar pixPerArm = pixPerRadial = pixelCount / arms\nradials = array(arms)\nfor (i = 0; i < arms; i ++) { radials[i] = array(pixPerArm) } \n\n// Arm remap array -> takes physical segment in index order (wired order)\n// and returns the index of segment where 0 is the straight up arm (12 oo clock)\n// and proceeds clockwise. aRa[chunk] = clockPositionHour\nvar aRa = array(arms);\naRa[0] = 0; aRa[1] = 6; aRa[2] = 2; aRa[3] = 8;\naRa[4] = 4; aRa[5] = 10; aRa[6] = 7; aRa[7] = 1; \naRa[8] = 9; aRa[9] = 3; aRa[10] = 11; aRa[11] = 5; \nfunction indexToRadial(index) {\n  segment = floor(index / pixPerArm)\n  return aRa[segment]\n}\n\n// 0, 1/12, 2/12, ..etc.. 11/12 \nfunction indexToUnitRadial(index) {\n  return indexToRadial(index) / arms\n}\n\n// Takes an index, returns # pixels from center\nfunction indexFromCenter(index) {\n  arm = floor(index / pixPerArm)\n  inbound = (arm % 2) == 0\n  pixIntoArm = index % pixPerArm\n  pixFromCenter = inbound ? (pixPerArm - pixIntoArm - 1) : pixIntoArm\n  return pixFromCenter\n}\n\n// Takes an index, returns a fraction of an arm's length from center\nfunction indexToUnit(index) {\n  return indexFromCenter / pixPerArm\n}\n\n\nvar radialIndex = array(pixelCount)\nfor (i = 0; i < pixelCount; i++) { radialIndex[i] = indexFromCenter(i) }\n\n\n// Takes an index, returns a fraction of an arm's length from center\nfunction indexToUnit(index) {\n  return radialIndex[index] / pixPerArm\n}\n\nvar radialPct = array(pixelCount)\nfor (i = 0; i < pixelCount; i++) { radialPct[i] = indexToUnit(i) }\n\n\n\n\n\nvals = array(pixPerArm)\nhues = array(pixPerArm)\n\nexport function beforeRender(delta) {\n\tfor (i = 0; i < pixPerArm; i++) {\n  \tvals[i] -= .005 * delta * .1\n  \tif (vals[i] <= 0) {\n  \t  vals[i] = random(1)\n  \t  hues[i] = time(.07) + triangle(i / pixPerArm) * .2\n  \t}\n\t}\n}\n\nexport function render(rawIndex) {\n  pct = radialPct[rawIndex]\n  v = vals[indexFromCenter(rawIndex)]\n  v = v*v\n\thsv(hues[indexFromCenter(rawIndex)], 1, v*(0.01+pct))\n}\n"
  },
  "preview": "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"
}