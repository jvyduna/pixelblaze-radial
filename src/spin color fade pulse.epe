{
  "name": "spin color fade pulse",
  "id": "YY5DBwWsBrr6x32xu",
  "sources": {
    "main": "/* Also mapped. 12 * 144 of SK9822 wired in setions as:\n        0\n     5     x\n   x         1\n  4           x\n   x         2\n    3      x\n        x\n*/\n\nvar arms = 12\nvar pixPerArm = pixPerRadial = pixelCount / arms\nradials = array(arms)\nfor (i = 0; i < arms; i ++) { radials[i] = array(pixPerArm) } \n\n// Arm remap array -> takes physical segment in index order (wired order)\n// and returns the index of segment where 0 is the straight up arm (12 oo clock)\n// and proceeds clockwise. aRa[chunk] = clockPositionHour\nvar aRa = array(arms);\naRa[0] = 0; aRa[1] = 6; aRa[2] = 2; aRa[3] = 8;\naRa[4] = 4; aRa[5] = 10; aRa[6] = 7; aRa[7] = 1; \naRa[8] = 9; aRa[9] = 3; aRa[10] = 11; aRa[11] = 5; \nfunction indexToRadial(index) {\n  segment = floor(index / pixPerArm)\n  return aRa[segment]\n}\n\n// 0, 1/12, 2/12, ..etc.. 11/12 \nfunction indexToUnitRadial(index) {\n  return indexToRadial(index) / arms\n}\n\n// Takes an index, returns # pixels from center\nfunction indexFromCenter(index) {\n  arm = floor(index / pixPerArm)\n  inbound = (arm % 2) == 0\n  pixIntoArm = index % pixPerArm\n  pixFromCenter = inbound ? (pixPerArm - pixIntoArm - 1) : pixIntoArm\n  return pixFromCenter\n}\n\n// Takes an index, returns a fraction of an arm's length from center\nfunction indexToUnit(index) {\n  return indexFromCenter / pixPerArm\n}\n\nvar radialIndex = array(pixelCount)\nfor (i = 0; i < pixelCount; i++) { radialIndex[i] = indexFromCenter(i) }\n// Takes an index, returns a fraction of an arm's length from center\nfunction indexToUnit(index) {\n  return radialIndex[index] / pixPerArm\n}\n\nvar radialPct = array(pixelCount)\nfor (i = 0; i < pixelCount; i++) { radialPct[i] = indexToUnit(i) }\n\n\nexport function beforeRender(delta) {\n  t1 = time(.01)\n  t2 = time(.1)*PI2\n  t3 = time(.02)\n}\n\nexport function render(rawIndex) {\n  pct = radialPct[rawIndex]\n  index = radialIndex[rawIndex]\n  pixelCount = pixPerArm\n  h = (index/pixelCount*2 - t1) \n  s = (1+sin(t2 + index/pixelCount*PI))/2 \n  v = triangle((t3 + index/pixelCount*4) %1) \n  v = (v*v*v*v)*.5 \n  hsv(h,s,v*(0.01+pct))\n}"
  },
  "preview": "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"
}