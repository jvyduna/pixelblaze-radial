{
  "name": "spin inward pulse",
  "id": "4odiax7z3f5TrAFGw",
  "sources": {
    "main": "/* Also mapped. 12 * 144 of SK9822 wired in setions as:\n        0\n     5     x\n   x         1\n  4           x\n   x         2\n    3      x\n        x\n*/\n\nvar arms = 12\nvar pixPerArm = pixPerRadial = pixelCount / arms\nradials = array(arms)\nfor (i = 0; i < arms; i ++) { radials[i] = array(pixPerArm) } \n\n// Arm remap array -> takes physical segment in index order (wired order)\n// and returns the index of segment where 0 is the straight up arm (12 oo clock)\n// and proceeds clockwise. aRa[chunk] = clockPositionHour\nvar aRa = array(arms);\naRa[0] = 0; aRa[1] = 6; aRa[2] = 2; aRa[3] = 8;\naRa[4] = 4; aRa[5] = 10; aRa[6] = 7; aRa[7] = 1; \naRa[8] = 9; aRa[9] = 3; aRa[10] = 11; aRa[11] = 5; \nfunction indexToRadial(index) {\n  segment = floor(index / pixPerArm)\n  return aRa[segment]\n}\n\n// 0, 1/12, 2/12, ..etc.. 11/12 \nfunction indexToUnitRadial(index) {\n  return indexToRadial(index) / arms\n}\n\n// Takes an index, returns # pixels from center\nfunction indexFromCenter(index) {\n  arm = floor(index / pixPerArm)\n  inbound = (arm % 2) == 0\n  pixIntoArm = index % pixPerArm\n  pixFromCenter = inbound ? (pixPerArm - pixIntoArm - 1) : pixIntoArm\n  return pixFromCenter\n}\n\nradialIndex = array(pixelCount)\nfor (i = 0; i < pixelCount; i++) { radialIndex[i] = indexFromCenter(i) }\n\n\n// Takes an index, returns a fraction of an arm's length from center\nfunction indexToUnit(index) {\n  return indexFromCenter / pixPerArm\n}\n\nradialPct = array(pixelCount)\nfor (i = 0; i < pixelCount; i++) { radialPct[i] = indexToUnit(i) }\n\n\n\nexport function beforeRender(delta) {\n  t1 = time(.1)\n}\n\nexport function render(index) {\n  index = radialIndex[index]\n  pixelCount = pixPerArm\n  v = triangle(((t1) + index/pixelCount) %1)\n  v = v*v*v*v*v\n  s = v < .9\n  hsv(t1,s,v)\n}"
  },
  "preview": "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"
}