{
  "name": "spin rainbow melt",
  "id": "wDn9FrZh8zZfKweL4",
  "sources": {
    "main": "/* Also mapped. 12 * 144 of SK9822 wired in setions as:\n        0\n     5     x\n   x         1\n  4           x\n   x         2\n    3      x\n        x\n*/\n\nvar arms = 12\nvar pixPerArm = pixPerRadial = pixelCount / arms\nradials = array(arms)\nfor (i = 0; i < arms; i ++) { radials[i] = array(pixPerArm) } \n\n// Arm remap array -> takes physical segment in index order (wired order)\n// and returns the index of segment where 0 is the straight up arm (12 oo clock)\n// and proceeds clockwise. aRa[chunk] = clockPositionHour\nvar aRa = array(arms);\naRa[0] = 0; aRa[1] = 6; aRa[2] = 2; aRa[3] = 8;\naRa[4] = 4; aRa[5] = 10; aRa[6] = 7; aRa[7] = 1; \naRa[8] = 9; aRa[9] = 3; aRa[10] = 11; aRa[11] = 5; \nfunction indexToRadial(index) {\n  segment = floor(index / pixPerArm)\n  return aRa[segment]\n}\n\n// 0, 1/12, 2/12, ..etc.. 11/12 \nfunction indexToUnitRadial(index) {\n  return indexToRadial(index) / arms\n}\n\n// Takes an index, returns # pixels from center\nfunction indexFromCenter(index) {\n  arm = floor(index / pixPerArm)\n  inbound = (arm % 2) == 0\n  pixIntoArm = index % pixPerArm\n  pixFromCenter = inbound ? (pixPerArm - pixIntoArm - 1) : pixIntoArm\n  return pixFromCenter\n}\n\nvar radialIndex = array(pixelCount)\nfor (i = 0; i < pixelCount; i++) { radialIndex[i] = indexFromCenter(i) }\n\n\n// Takes an index, returns a fraction of an arm's length from center\nfunction indexToUnit(index) {\n  return radialIndex[index] / pixPerArm\n}\n\nvar radialPct = array(pixelCount)\nfor (i = 0; i < pixelCount; i++) { radialPct[i] = indexToUnit(i) }\n\n\n\n\nhl = pixPerArm/2\nexport function beforeRender(delta) {\n  t1 =  time(.1)\n  t2 = time(0.13)\n}\n\nexport function render(index) {\n  index = radialIndex[index]\n  \n  pct = index/ pixPerArm + 0.01\n  c1 = 1-abs(index - hl)/hl\n  c2 = wave(c1)\n  c3 = wave(c2 + t1)\n  v = wave(c3 + t1)\n  v = v*v\n  hsv(c1 + t2,1, v*pct)\n}"
  },
  "preview": "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"
}