{
  "name": "spin sparkfire",
  "id": "fgXYExrtubG5gjqo5",
  "sources": {
    "main": "/* Also mapped. 12 * 144 of SK9822 wired in setions as:\n        0\n     5     x\n   x         1\n  4           x\n   x         2\n    3      x\n        x\n*/\n\nvar arms = 12\nvar pixPerArm = pixPerRadial = pixelCount / arms\nradials = array(arms)\nfor (i = 0; i < arms; i ++) { radials[i] = array(pixPerArm) } \n\n// Arm remap array -> takes physical segment in index order (wired order)\n// and returns the index of segment where 0 is the straight up arm (12 oo clock)\n// and proceeds clockwise. aRa[chunk] = clockPositionHour\nvar aRa = array(arms);\naRa[0] = 0; aRa[1] = 6; aRa[2] = 2; aRa[3] = 8;\naRa[4] = 4; aRa[5] = 10; aRa[6] = 7; aRa[7] = 1; \naRa[8] = 9; aRa[9] = 3; aRa[10] = 11; aRa[11] = 5; \nfunction indexToRadial(index) {\n  segment = floor(index / pixPerArm)\n  return aRa[segment]\n}\n\n// 0, 1/12, 2/12, ..etc.. 11/12 \nfunction indexToUnitRadial(index) {\n  return indexToRadial(index) / arms\n}\n\n// Takes an index, returns # pixels from center\nfunction indexFromCenter(index) {\n  arm = floor(index / pixPerArm)\n  inbound = (arm % 2) == 0\n  pixIntoArm = index % pixPerArm\n  pixFromCenter = inbound ? (pixPerArm - pixIntoArm - 1) : pixIntoArm\n  return pixFromCenter\n}\n\nvar radialIndex = array(pixelCount)\nfor (i = 0; i < pixelCount; i++) { radialIndex[i] = indexFromCenter(i) }\n\n\n// Takes an index, returns a fraction of an arm's length from center\nfunction indexToUnit(index) {\n  return radialIndex[index] / pixPerArm\n}\n\nvar radialPct = array(pixelCount)\nfor (i = 0; i < pixelCount; i++) { radialPct[i] = indexToUnit(i) }\n\n\n\n\nnumSparks = 5\naccel = .03\nspeed = .05\ncooling1 = .14 // subtractive cooling\ncooling2 = .99 // coefficient cooling\nsparks = array(numSparks)\nsparkX = array(numSparks)\npixels = array(pixPerArm)\n\n\n\nfor (i = 0; i < numSparks; i++) {\n  sparks[i] = random(.4)\n  sparkX[i] = random(pixPerArm)\n}\n\nexport function beforeRender(delta) {\n  delta *= speed\n\n  for(i = 0; i < pixPerArm; i++) {\n    cooldown = cooling1 * delta\n   \n    if(cooldown>pixels[i]) {\n      pixels[i]=0\n    } else {\n      pixels[i]=pixels[i]*cooling2-cooldown\n    }\n  }\n  \n  for(k= pixPerArm - 1; k >= 4; k--) {\n      h1 = pixels[k - 1]\n      h2 = pixels[k - 2]\n      h3 = pixels[k - 3]\n      h4 = pixels[k - 4]\n      // heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 4]*5) / 7\n      pixels[k] = (h1+h2+h3*2+h4*3)/7\n    }\n  \n  for (i = 0; i < numSparks; i++) {\n    if (sparks[i] <= 0) {\n      sparks[i] = random(1)\n      sparkX[i] = 0\n    }\n    sparks[i] += accel * delta\n    \n    ox = sparkX[i]\n    sparkX[i] += sparks[i] * sparks[i] * delta\n    if (sparkX[i] > pixPerArm) {\n      sparkX[i] = 0\n      sparks[i] = 0\n      continue\n    }\n    \n    for (j = ox; j < sparkX[i]; j++)\n      pixels[j] += clamp(1-sparks[i]*.4, 0 , 1)*.5\n  }\n}\n\nexport function render(index) {\n  pct = radialPct[index]\n  index = radialIndex[index]\n  \n  v = pixels[index]\n  hsv(.1 * clamp(v*v, 0,1), 1-(v-1)*2, v*2*pct)\n}\n"
  },
  "preview": "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"
}